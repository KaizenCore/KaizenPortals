plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id("io.github.goooler.shadow") version "8.1.8"
}

group = 'com.kaizencore'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "sonatype"
        url = uri("https://oss.sonatype.org/content/groups/public/")
    }
    maven {
        name = "jitpack.io"
        url = uri("https://jitpack.io")
    }
    maven {
        name = "spigot-repo"
        url = uri("https://hub.spigotmc.org/nexus/content/repositories/snapshots/")
    }
}

dependencies {
    // Use Spigot API for Minecraft 1.21
    compileOnly("org.spigotmc:spigot-api:1.21-R0.1-SNAPSHOT")

    // XSeries for cross-version compatibility
    implementation("com.github.cryptomorin:XSeries:11.3.0") {
        exclude group: "org.spigotmc", module: "spigot-api"
    }

    // Vault API for economy support
    compileOnly("com.github.MilkBowl:VaultAPI:1.7.1") {
        exclude group: "org.bukkit", module: "bukkit"
    }

    // Testing dependencies
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
    testImplementation("org.mockito:mockito-core:5.5.0")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.8")
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

// Configure test task
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Configure JAR naming
tasks.withType(Jar) {
    archiveBaseName.set('KaizenPortals')
}

// Shadow JAR configuration
shadowJar {
    archiveBaseName.set('KaizenPortals')
    archiveClassifier.set('all')
    relocate 'com.cryptomorin.xseries', 'portals.portaltoexit.libs.xseries'

    // Only include runtime dependencies we need
    dependencies {
        include(dependency('com.github.cryptomorin:XSeries:.*'))
    }
}

// For runServer task, use the shadowJar if available, otherwise use regular jar
tasks.runServer {
    dependsOn 'jar'
}
